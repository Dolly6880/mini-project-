import numpy as np
import matplotlib.pyplot as plt
import pandas as pd


dataset=pd.read_csv("depression survey.csv")

X = dataset.iloc[:, 0:37].values
y = dataset.iloc[:, 38].values



from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y)



'''from sklearn.linear_model import LogisticRegression
log_reg = LogisticRegression()
log_reg.fit(X, y)

log_reg.score(X, y)




y_pred = log_reg.predict(X)'''


from sklearn.linear_model import LogisticRegression
log_reg = LogisticRegression()
log_reg.fit(X,y)





y_pred = log_reg.predict(X)


log_reg.score(X, y)




"""plt.scatter(X_train, y_train) X AND Y MUST BE OF THE SAME SIZE ERROR"""
"""plt.scatter(X_train, y_train)
plt.plot(X_train,log_reg.predict(X_train),c="r")
plt.show()

plt.scatter(X, y)
plt.plot(X,log_reg.predict(X_train),c="r")
plt.show()"""



from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y,y_pred)
print(cm)

from sklearn.metrics import precision_score, recall_score, f1_score
t=precision_score(y, y_pred,average='weighted')
j=recall_score(y, y_pred,average='weighted')
h=f1_score(y, y_pred,average='weighted')




from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier(max_depth=6)
clf.fit(X, y)

clf.score(X, y)




y_pred = clf.predict(X)


from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y, y_pred)
print(cm)

from sklearn.metrics import precision_score, recall_score, f1_score
precision_score(y, y_pred,average='weighted')
recall_score(y, y_pred,average='weighted')
f1_score(y, y_pred,average='weighted')



from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3)
classifier.fit(X, y)
classifier.score(X, y)

y_pred = classifier.predict(X)


from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y, y_pred)
print(cm)

from sklearn.metrics import precision_score, recall_score, f1_score
precision_score(y, y_pred,average='weighted')
recall_score(y, y_pred,average='weighted')
f1_score(y, y_pred,average='weighted')
